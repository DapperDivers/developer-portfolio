# Project Intelligence & Usage Patterns

This document captures important patterns, preferences, and project intelligence for the developer portfolio project. It serves as a learning journal that helps Cline work more effectively with the codebase and the project's specific requirements.

The following patterns are based on the detailed front-end best practices documentation in the ai-docs folder, particularly the implementation steps checklist, component migration examples, and design system specification.

## Code Structure Patterns

### Component Organization (Atomic Design)
- Atomic components (Button, Card) live in `src/components/ui/`
- Layout components (Section) live in `src/components/layout/`
- Section containers live in `src/containers/`
- Feature-specific components live in `src/components/`
- Each component has a paired CSS file with the same name
- Component tests go in `__tests__` directories adjacent to components
- Feature-specific hooks live in `src/hooks/`
- Context providers live in `src/context/`

### Naming Conventions
- PascalCase for component files and component names
- camelCase for utility functions and hooks
- Hooks start with `use` prefix (e.g., `useProjects.js`)
- CSS files match component names exactly
- Test files use `.test.jsx` extension

### File Placement
- Section components: `src/containers/`
- Base UI components: `src/components/ui/`
- Layout components: `src/components/layout/`
- Custom hooks: `src/hooks/`
- Utility functions: `src/utils/`
- Global CSS: `src/assets/css/`
- Component CSS: alongside component files

## Implementation Preferences

### Component Structure
- Use functional components with hooks
- Separate business logic from presentation using custom hooks
- Include comprehensive PropTypes for all component props with descriptions
- Use JSDoc comments with examples for component documentation
- Apply React.memo for performance optimization of expensive components
- Create feature-specific custom hooks for data and operations
- Implement compound components for related subcomponents when appropriate
- Use context for cross-component state management

### Component API Patterns
- Consistent prop naming across similar components:
  - `className` for additional CSS classes
  - `variant` for style variations (primary, secondary, etc.)
  - `size` for size variations (small, medium, large)
  - `children` for component content
  - `hasAnimation` for toggling animation features
  - `icon` for icon elements
  - `isExternal` for external links
  - `ariaLabel` for accessibility labeling
- Consistent event handler naming:
  - `onClick` for click events
  - `onChange` for input changes
  - `onSubmit` for form submissions
- Use rest props spreading for passing through HTML attributes

### Design System Approach
- Use CSS variables (custom properties) for design tokens
- Design tokens are defined in `src/assets/css/design-tokens.css`
- Organized by category:
  - Colors (primary, secondary, semantic, neutrals)
  - Typography (families, sizes, weights, line heights)
  - Spacing (consistent scale with rem units)
  - Borders (widths, radiuses)
  - Shadows (elevations)
  - Transitions (durations, easing)
  - Breakpoints (responsive design)
  - Z-index (stacking contexts)
- Component-specific styles in dedicated CSS files
- Avoid inline styles except for dynamic values
- Follow BEM naming convention for CSS classes
- Use semantic variables when appropriate (--color-primary vs. explicit hex)

### State Management Patterns
- Use PortfolioContext for centralized data access
- Create feature-specific custom hooks (useProjects, useExperience, etc.)
- Export top-level usePortfolio hook for generic context access
- Create derived/computed data using useMemo in custom hooks
- Keep component state local when possible
- Use useReducer for complex state logic
- Avoid prop drilling through more than 2 levels

### Testing Patterns
- Test files follow the pattern `ComponentName.test.jsx`
- Test component rendering, user interactions, and accessibility
- Use React Testing Library over Enzyme
- Test happy paths and edge cases
- Simulate user events rather than testing implementation details
- Mock external dependencies and context providers
- Focus on testing behavior over implementation

### Performance Optimization Patterns
- Use React.lazy and Suspense for code splitting
- Apply useCallback for event handlers passed as props
- Use useMemo for expensive calculations
- Create dedicated optimization hooks (useCallbackHandlers, useMemoValues)
- Implement proper key props for list items
- Use intersection observer for lazy loading and animations
- Apply will-change CSS property for animation performance
- Optimize image loading with responsive images

## Critical Implementation Paths

### Adding a New Section
1. Create a new container component in `src/containers/`
2. Use the Section layout component as a wrapper
3. Create feature-specific components in `src/components/`
4. Create a feature-specific custom hook in `src/hooks/`
5. Add data to the portfolio context
6. Import and add to App.jsx (consider using React.lazy)
7. Create section-specific CSS using design tokens

### Modifying Existing Section
1. Locate the container component in `src/containers/`
2. Find related sub-components in `src/components/`
3. Check for custom hooks in `src/hooks/`
4. Update both component logic and styles

### Adding New UI Component
1. Create component file in `src/components/ui/`
2. Create matching CSS file using design tokens
3. Add comprehensive PropTypes with descriptions
4. Add JSDoc comments with examples
5. Create tests in `__tests__` directory
6. Consider memoization with React.memo
7. Implement consistent prop API patterns
8. Add accessibility attributes (ARIA)
9. Handle keyboard navigation where appropriate
10. Consider compound components if complex

### Component Migration Pattern
1. Identify common patterns in existing component
2. Extract these patterns to base UI components
3. Create appropriate component hierarchy
4. Add prop validation and documentation
5. Implement feature-specific custom hooks for logic
6. Apply context for data access
7. Apply performance optimizations
8. Update CSS to use design tokens
9. Add necessary tests

## Known Challenges

### CSS Organization
- Some sections still use legacy CSS organization
- Design tokens not yet fully implemented across all components
- Media queries could be more consistent

### Component Consistency
- Not all sections have been refactored to use base components
- Prop naming could be more consistent across similar components
- Animation patterns vary between sections

### Performance Considerations
- Some animations may be heavy on mobile devices
- GitHub API can hit rate limits without authentication
- Image optimization pipeline needs improvement

## Implementation Approach

### Incremental Migration Strategy
1. Start with project structure and design token system
2. Create base UI components (Button, Card, Section)
3. Implement context API for state management
4. Refactor one section at a time
   - Start with Projects section
   - Then Experience, Skills, Education, and other sections
5. Apply performance optimizations
6. Improve accessibility
7. Add tests and documentation

### Component Refactoring Priority
1. Projects section (primary demonstration of patterns)
2. Experience section
3. Skills section
4. Education section
5. Feedbacks section
6. Contact/GitHub section
7. Navigation and Footer components

## Project Evolution Timeline

### Phase 1: Foundation (Completed)
- Project structure setup
- Base component creation (Button, Card, Section)
- Design token system implementation
- Core hooks and context implementation

### Phase 2: Component Migration (In Progress)
- Refactoring section components one by one
- Implementing feature-specific hooks
- Enhancing component documentation

### Phase 3: Performance & Accessibility (Upcoming)
- Complete memoization strategy
- Implement callback and memo hooks
- Add ARIA attributes
- Implement keyboard navigation
- Enhance screen reader support
- Expand test coverage

### Phase 4: Advanced Features & Polish (Future)
- Additional features like dark mode
- Interactive filtering
- Advanced animations
- Comprehensive documentation

## User Preferences

### Implementation Focus
- Prefer atomic, reusable components over one-off solutions
- Focus on maintainable code with clear documentation
- Prioritize accessibility and performance
- Follow the implementation steps checklist in ai-docs
- Use component migration examples as reference
- Implement design system tokens consistently

### Documentation Approach
- Maintain comprehensive memory bank documents
- Use JSDoc for code-level documentation
- Include examples for component usage

### Technical Choices
- React Context is preferred over Redux for this project
- CSS variables preferred over Sass/LESS
- Component-specific CSS over global styles
- Functional components with hooks over class components
